{"version":3,"sources":["landingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LandingPage","props","state","width","height","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","landingJumbo","document","getElementById","clientHeight","docHeight","innerHeight","docWidth","innerWidth","console","debug","setState","Navbar","bg","variant","expand","id","Container","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","style","minHeight","Jumbotron","display","margin","padding","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6SA+EeA,E,kDAtEb,WAAYC,GAAiB,IAAD,8BAC1B,cAAMA,IACDC,MAAQ,CAAEC,MAAO,EAAGC,OAAQ,GACjC,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAHJ,E,qDAM5B,WACEC,KAAKF,yBACLG,OAAOC,iBAAiB,SAAUF,KAAKF,0B,kCAGzC,WACEG,OAAOE,oBAAoB,SAAUH,KAAKF,0B,oCAG5C,WAA0B,IAAD,EAEjBM,EAAgC,UACpCC,SAASC,eAAe,qBADY,aACpC,EAAuCC,aACrCC,EAAoBP,OAAOQ,YAC3BC,EAAmBT,OAAOU,WAC1BP,GACFQ,QAAQC,MACN,gEAEFL,GAAuC,EAAfJ,GAExBQ,QAAQC,MAAM,+CAEhBb,KAAKc,SAAS,CAAElB,MAAOc,EAAUb,OAAQW,M,oBAK3C,WAQE,OACE,qCACE,cAACO,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,GAAG,aAAhD,SACE,eAACC,EAAA,EAAD,WACE,cAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,QAAnB,2BACA,cAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,eAC7B,cAACT,EAAA,EAAOU,SAAR,CAAiBN,GAAG,aAApB,SACE,eAACO,EAAA,EAAD,CAAKC,UAAU,UAAf,UACE,cAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,QAAf,kBACA,cAACI,EAAA,EAAIE,KAAL,oBACA,cAACF,EAAA,EAAIE,KAAL,uBACA,cAACF,EAAA,EAAIE,KAAL,gCAKR,cAACR,EAAA,EAAD,CAAWS,MAAO,CAAEC,UAAW9B,KAAKL,MAAME,QAA1C,SACE,cAACkC,EAAA,EAAD,CAAWJ,UAAU,eAAeE,MAxBnB,CACrBG,QAAS,OACTF,UAAW,UACXG,OAAQ,IACRC,QAAS,KAoBL,SACE,oBAAIP,UAAU,SAASE,MAAO,CAAEhC,OAAQ,QAAxC,sC,GA7DcsC,aCAXC,EANH,WACV,OACE,cAAC,EAAD,KCUWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAASC,eAAe,SAM1B+B,M","file":"static/js/main.413ec33f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Nav, Navbar, Container, Jumbotron } from \"react-bootstrap\";\r\n\r\nimport \"./landingPage.css\";\r\n\r\ntype MyProps = {};\r\ntype MyState = { width: number; height: number };\r\n\r\nclass LandingPage extends Component<MyProps, MyState> {\r\n  constructor(props: MyProps) {\r\n    super(props);\r\n    this.state = { width: 0, height: 0 };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    // Update Jumbotron size in landing page using devices height.\r\n    const landingJumbo: number | undefined =\r\n      document.getElementById(\"top-navbar\")?.clientHeight;\r\n    let docHeight: number = window.innerHeight;\r\n    let docWidth: number = window.innerWidth;\r\n    if (landingJumbo) {\r\n      console.debug(\r\n        \"Height of Nav Bar found. negating it from background height.\"\r\n      );\r\n      docHeight = docHeight - landingJumbo * 2;\r\n    } else {\r\n      console.debug(\"Nav bar not found. Has it not rendered yet?\");\r\n    }\r\n    this.setState({ width: docWidth, height: docHeight});\r\n  }\r\n\r\n  // Allows for dynamic resizing of document in React to affect background size.\r\n\r\n  render() {\r\n    const jumbotronStyle = {\r\n      display: \"flex\",\r\n      minHeight: \"inherit\",\r\n      margin: \"0\",\r\n      padding: \"0\",\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\" id=\"top-navbar\">\r\n          <Container>\r\n            <Navbar.Brand href=\"#home\">Alex Musgrove</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"navbar-nav\" />\r\n            <Navbar.Collapse id=\"navbar-nav\">\r\n              <Nav className=\"ml-auto\">\r\n                <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                <Nav.Link>About</Nav.Link>\r\n                <Nav.Link>Services</Nav.Link>\r\n                <Nav.Link>Contact</Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Container>\r\n        </Navbar>\r\n        <Container style={{ minHeight: this.state.height}}>\r\n          <Jumbotron className=\"clear-colour\" style={jumbotronStyle}>\r\n            <h1 className=\"m-auto\" style={{ height: \"100%\" }}>\r\n              Alex Musgrove\r\n            </h1>\r\n          </Jumbotron>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;\r\n","import LandingPage from \"./landingPage\"\n\nconst App = () => {\n  return (\n    <LandingPage/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}